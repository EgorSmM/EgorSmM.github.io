<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>life | Academic</title>
    <link>https://example.com/tag/life/</link>
      <atom:link href="https://example.com/tag/life/index.xml" rel="self" type="application/rss+xml" />
    <description>life</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 02 May 2022 14:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>life</title>
      <link>https://example.com/tag/life/</link>
    </image>
    
    <item>
      <title>Отчет о моей деятельности.</title>
      <link>https://example.com/post/%D0%BE%D1%82%D1%87%D0%B5%D1%82-%D0%BE-%D0%BC%D0%BE%D0%B5%D0%B8-%D0%B4%D0%B5%D1%8F%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8/</link>
      <pubDate>Mon, 02 May 2022 14:00:00 +0000</pubDate>
      <guid>https://example.com/post/%D0%BE%D1%82%D1%87%D0%B5%D1%82-%D0%BE-%D0%BC%D0%BE%D0%B5%D0%B8-%D0%B4%D0%B5%D1%8F%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D1%81%D1%82%D0%B8/</guid>
      <description>&lt;p&gt;Первые три модуля обучения в РУДН были кайфовыми. Я успевал подрабатывать и даже начал заниматься научной деятельностью. И у меня даже появились какие -то сподвижки на этом поприще. Но потом появился Дмитрий Сергеевич. Всего за 2 недели операционных систем я превратился в того, кого вы видите на фотографии. Я просто не успеваю ничем заниматься. И это даже не столько от того, что сами лабораторные занимают кучу времени. А они занимают кучу времени. Но кроме этого из-за записи видео, на которых нельзя лежать в кровати и в удобной позе делать лабы, из-за записи видео, в связи с которыми комп виснет, я начинаю беситься. Все это приводит к эмоцианальному истощению из-за которого просто не хочется ничего делать. После лабы я лежу в безэмоциональном состоянии по нескольку часов. Так что за прошедшую неделю мне нечем похвастаться, кроме того, что я сделал 2 лабы и первую часть индивидуального проекта. Боже, когда уже этот модуль закончится!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Управление версиями. Git.</title>
      <link>https://example.com/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git/</link>
      <pubDate>Mon, 02 May 2022 14:00:00 +0000</pubDate>
      <guid>https://example.com/post/%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.-git/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;VCS – это системы контроля версий. Они используются при работе в
команде. Обычно основное дерево проекта хранится в локальном или
удалённом репозитории, к которому настроен доступ для участников
проекта. При внесении изменений в содержание проекта система
контроля версий позволяет их фиксировать, совмещать изменения,
произведённые разными участниками проекта, производить откат к
любой более ранней версии проекта, если это требуется.&lt;/li&gt;
&lt;li&gt;Хранилище – место, в котором хранятся все версии проекта. Для
уменьшения объема используемой памяти можно хранить только
изменения проекта.
Commit – добавленные и измененные файлы по сравнению с
предшествующей версией проекта.
История – последовательность изменений проекта.
Рабочая копия – копия над которой сейчас идет работа.&lt;/li&gt;
&lt;li&gt;Централизованная система – система, в которой существует центральное
хранилище, которое доступно всем участникам проекта. В
децентрализованной системе у каждого участника есть свой
репозиторий, что позволяет работать, не подключаясь к сети. Пример
централизованной системы: CVS. Децентрализованной: Git.&lt;/li&gt;
&lt;li&gt;При единоличной работе с VCS берешь нужную версию, вносишь правки
и добавляешь коммит.&lt;/li&gt;
&lt;li&gt;При совместной работе в централизованном хранилище, добавляется
работа по устранению конфликтов. Также необходимо сливать версии, и
вообще следить за структурированностью истории. Нельзя забывать
проверять последнюю версию программы, потому что напарник мог ее
изменить.&lt;/li&gt;
&lt;li&gt;Git помогает работать одновременно над одним и тем же проектом
независимо, а потом совмещать достижения разработчиков. Также он
помогает хранить историю версий, что позволяет быстро откатиться в
случае необходимости.&lt;/li&gt;
&lt;li&gt;Основные команды Git:
Создание основного дерева репозитория: git init
Получение обновлений (изменений) текущего дерева из центрального
репозитория: git pull
Отправка всех произведённых изменений локального дерева в
центральный репозиторий: git push
Просмотр списка изменённых файлов в текущей директории: git status
Просмотр текущих изменений: git diff
Добавить все изменённые и/или созданные файлы и/или каталоги: git add
Добавить конкретные изменённые и/или созданные файлы и/или
каталоги: git add имена_файлов
Удалить файл и/или каталог из индекса репозитория (при этом файл
и/или каталог остаётся в локальной директории): git rm имена_файлов
Сохранить все добавленные изменения и все изменённые файлы:
git commit -am &amp;lsquo;Описание коммита&amp;rsquo;
Сохранить добавленные изменения с внесением комментария через
встроенный редактор: git commit
Создание новой ветки, базирующейся на текущей:
checkout -b имя_ветки
Переключение на некоторую ветку: git checkout имя_ветки
(при переключении на ветку, которой ещё нет в локальном репозитории,
она будет создана и связана с удалённой)
Отправка изменений конкретной ветки в центральный репозиторий:
git push origin имя_ветки
Слияние ветки с текущим деревом: git merge &amp;ndash;no-ff имя_ветки
Удаление локальной уже слитой с основным деревом ветки:
git branch -d имя_ветки
Принудительное удаление локальной ветки: git branch -D имя_ветки
Удаление ветки с центрального репозитория: git push origin :имя_ветки&lt;/li&gt;
&lt;li&gt;Пример использования локального репозитория: В Git создать
репозиторий привязанный к имени пользователя и email и работать в нем
не подключаясь к сети.
Пример использования удаленного репозитория: создать репозиторий на
Github, настроить авторизацию через ssh-ключ и pgp-ключ,
авторизоваться и работать с ним через командную строку.&lt;/li&gt;
&lt;li&gt;Ветви необходимы в случае, если есть несколько путей развития
программы, поэтому из одной версии получаются сразу несколько.&lt;/li&gt;
&lt;li&gt;Игнорировать файлы можно с помощью команды gitignore для того,
чтобы не забивать хранилище мусором.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
